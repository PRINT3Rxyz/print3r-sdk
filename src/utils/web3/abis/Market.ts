export const MarketABI = [
  {
    inputs: [
      { internalType: "address", name: "_weth", type: "address" },
      { internalType: "address", name: "_usdc", type: "address" },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  { inputs: [], name: "AlreadyInitialized", type: "error" },
  {
    inputs: [{ internalType: "bytes32", name: "key", type: "bytes32" }],
    name: "EnumerableMapNonexistentKey",
    type: "error",
  },
  { inputs: [], name: "IndexOutOfBounds", type: "error" },
  { inputs: [], name: "Market_AlreadyInitialized", type: "error" },
  { inputs: [], name: "Market_FailedToAddRequest", type: "error" },
  { inputs: [], name: "Market_FailedToRemoveRequest", type: "error" },
  { inputs: [], name: "Market_InvalidAllocation", type: "error" },
  { inputs: [], name: "Market_InvalidBorrowScale", type: "error" },
  { inputs: [], name: "Market_InvalidKey", type: "error" },
  { inputs: [], name: "Market_InvalidPoolOwner", type: "error" },
  { inputs: [], name: "Market_MaxLeverageDelta", type: "error" },
  { inputs: [], name: "Market_NotRequestOwner", type: "error" },
  { inputs: [], name: "Market_RequestNotExpired", type: "error" },
  { inputs: [], name: "NewOwnerIsZeroAddress", type: "error" },
  { inputs: [], name: "NoHandoverRequest", type: "error" },
  { inputs: [], name: "Pool_InvalidLeverage", type: "error" },
  { inputs: [], name: "Pool_InvalidLiquidityScalar", type: "error" },
  { inputs: [], name: "Pool_InvalidMaxVelocity", type: "error" },
  { inputs: [], name: "Pool_InvalidReserveFactor", type: "error" },
  { inputs: [], name: "Pool_InvalidSkewScale", type: "error" },
  { inputs: [], name: "Reentrancy", type: "error" },
  { inputs: [], name: "Unauthorized", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      { indexed: false, internalType: "bool", name: "_isLong", type: "bool" },
    ],
    name: "FeesAccumulated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "marketId",
        type: "bytes32",
      },
    ],
    name: "MarketConfigUpdated",
    type: "event",
  },
  { anonymous: false, inputs: [], name: "Market_Initialized", type: "event" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "OwnershipHandoverCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "OwnershipHandoverRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "key", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RequestCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "key", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      { indexed: false, internalType: "bool", name: "isDeposit", type: "bool" },
    ],
    name: "RequestCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "uint256",
        name: "roles",
        type: "uint256",
      },
    ],
    name: "RolesUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "ticker",
        type: "string",
      },
    ],
    name: "TokenAdded",
    type: "event",
  },
  {
    inputs: [],
    name: "FUNDING_VELOCITY_CLAMP",
    outputs: [{ internalType: "uint64", name: "", type: "uint64" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bytes32", name: "_requestKey", type: "bytes32" },
      { internalType: "address", name: "_caller", type: "address" },
    ],
    name: "cancelRequest",
    outputs: [
      { internalType: "address", name: "tokenOut", type: "address" },
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "bool", name: "shouldUnwrap", type: "bool" },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "pendingOwner", type: "address" },
    ],
    name: "completeOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "address", name: "_owner", type: "address" },
      { internalType: "address", name: "_transferToken", type: "address" },
      { internalType: "uint256", name: "_amountIn", type: "uint256" },
      { internalType: "uint256", name: "_executionFee", type: "uint256" },
      { internalType: "bytes32", name: "_priceRequestKey", type: "bytes32" },
      { internalType: "uint40", name: "_stakeDuration", type: "uint40" },
      { internalType: "bool", name: "_reverseWrap", type: "bool" },
      { internalType: "bool", name: "_isDeposit", type: "bool" },
    ],
    name: "createRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      {
        components: [
          { internalType: "contract IMarket", name: "market", type: "address" },
          { internalType: "contract IVault", name: "vault", type: "address" },
          {
            components: [
              { internalType: "uint256", name: "amountIn", type: "uint256" },
              {
                internalType: "uint256",
                name: "executionFee",
                type: "uint256",
              },
              { internalType: "address", name: "owner", type: "address" },
              {
                internalType: "uint48",
                name: "requestTimestamp",
                type: "uint48",
              },
              { internalType: "uint40", name: "stakeDuration", type: "uint40" },
              { internalType: "bool", name: "isLongToken", type: "bool" },
              { internalType: "bool", name: "reverseWrap", type: "bool" },
              { internalType: "bool", name: "isDeposit", type: "bool" },
              { internalType: "bytes32", name: "key", type: "bytes32" },
              {
                internalType: "bytes32",
                name: "priceRequestKey",
                type: "bytes32",
              },
            ],
            internalType: "struct Pool.Input",
            name: "deposit",
            type: "tuple",
          },
          {
            components: [
              { internalType: "uint256", name: "min", type: "uint256" },
              { internalType: "uint256", name: "med", type: "uint256" },
              { internalType: "uint256", name: "max", type: "uint256" },
            ],
            internalType: "struct Oracle.Prices",
            name: "longPrices",
            type: "tuple",
          },
          {
            components: [
              { internalType: "uint256", name: "min", type: "uint256" },
              { internalType: "uint256", name: "med", type: "uint256" },
              { internalType: "uint256", name: "max", type: "uint256" },
            ],
            internalType: "struct Oracle.Prices",
            name: "shortPrices",
            type: "tuple",
          },
          { internalType: "bytes32", name: "key", type: "bytes32" },
          {
            internalType: "uint256",
            name: "longBorrowFeesUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBorrowFeesUsd",
            type: "uint256",
          },
          { internalType: "int256", name: "cumulativePnl", type: "int256" },
        ],
        internalType: "struct IVault.ExecuteDeposit",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "executeDeposit",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      {
        components: [
          { internalType: "contract IMarket", name: "market", type: "address" },
          { internalType: "contract IVault", name: "vault", type: "address" },
          {
            components: [
              { internalType: "uint256", name: "amountIn", type: "uint256" },
              {
                internalType: "uint256",
                name: "executionFee",
                type: "uint256",
              },
              { internalType: "address", name: "owner", type: "address" },
              {
                internalType: "uint48",
                name: "requestTimestamp",
                type: "uint48",
              },
              { internalType: "uint40", name: "stakeDuration", type: "uint40" },
              { internalType: "bool", name: "isLongToken", type: "bool" },
              { internalType: "bool", name: "reverseWrap", type: "bool" },
              { internalType: "bool", name: "isDeposit", type: "bool" },
              { internalType: "bytes32", name: "key", type: "bytes32" },
              {
                internalType: "bytes32",
                name: "priceRequestKey",
                type: "bytes32",
              },
            ],
            internalType: "struct Pool.Input",
            name: "withdrawal",
            type: "tuple",
          },
          {
            components: [
              { internalType: "uint256", name: "min", type: "uint256" },
              { internalType: "uint256", name: "med", type: "uint256" },
              { internalType: "uint256", name: "max", type: "uint256" },
            ],
            internalType: "struct Oracle.Prices",
            name: "longPrices",
            type: "tuple",
          },
          {
            components: [
              { internalType: "uint256", name: "min", type: "uint256" },
              { internalType: "uint256", name: "med", type: "uint256" },
              { internalType: "uint256", name: "max", type: "uint256" },
            ],
            internalType: "struct Oracle.Prices",
            name: "shortPrices",
            type: "tuple",
          },
          { internalType: "bytes32", name: "key", type: "bytes32" },
          {
            internalType: "uint256",
            name: "longBorrowFeesUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortBorrowFeesUsd",
            type: "uint256",
          },
          { internalType: "int256", name: "cumulativePnl", type: "int256" },
          { internalType: "bool", name: "shouldUnwrap", type: "bool" },
        ],
        internalType: "struct IVault.ExecuteWithdrawal",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "executeWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bool", name: "_isLong", type: "bool" },
    ],
    name: "getAverageCumulativeBorrowFee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getBorrowScale",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bool", name: "_isLong", type: "bool" },
    ],
    name: "getBorrowingRate",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getConfig",
    outputs: [
      {
        components: [
          { internalType: "uint16", name: "maxLeverage", type: "uint16" },
          { internalType: "uint16", name: "reserveFactor", type: "uint16" },
          { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
          { internalType: "int48", name: "skewScale", type: "int48" },
          {
            internalType: "int16",
            name: "positiveLiquidityScalar",
            type: "int16",
          },
          {
            internalType: "int16",
            name: "negativeLiquidityScalar",
            type: "int16",
          },
        ],
        internalType: "struct Pool.Config",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bool", name: "_isLong", type: "bool" },
    ],
    name: "getCumulativeBorrowFee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getCumulativeBorrowFees",
    outputs: [
      {
        internalType: "uint256",
        name: "longCumulativeBorrowFees",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortCumulativeBorrowFees",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getCumulatives",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "longAverageEntryPriceUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortAverageEntryPriceUsd",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longCumulativeBorrowFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCumulativeBorrowFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weightedAvgCumulativeLong",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weightedAvgCumulativeShort",
            type: "uint256",
          },
        ],
        internalType: "struct Pool.Cumulatives",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getFundingAccrued",
    outputs: [{ internalType: "int256", name: "", type: "int256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getFundingRates",
    outputs: [
      { internalType: "int64", name: "", type: "int64" },
      { internalType: "int64", name: "", type: "int64" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getImpactPool",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getImpactValues",
    outputs: [
      { internalType: "int16", name: "", type: "int16" },
      { internalType: "int16", name: "", type: "int16" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getLastUpdate",
    outputs: [{ internalType: "uint48", name: "", type: "uint48" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getMaxLeverage",
    outputs: [{ internalType: "uint16", name: "", type: "uint16" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bool", name: "_isLong", type: "bool" },
    ],
    name: "getOpenInterest",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "bytes32", name: "_requestKey", type: "bytes32" },
    ],
    name: "getRequest",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "amountIn", type: "uint256" },
          { internalType: "uint256", name: "executionFee", type: "uint256" },
          { internalType: "address", name: "owner", type: "address" },
          { internalType: "uint48", name: "requestTimestamp", type: "uint48" },
          { internalType: "uint40", name: "stakeDuration", type: "uint40" },
          { internalType: "bool", name: "isLongToken", type: "bool" },
          { internalType: "bool", name: "reverseWrap", type: "bool" },
          { internalType: "bool", name: "isDeposit", type: "bool" },
          { internalType: "bytes32", name: "key", type: "bytes32" },
          { internalType: "bytes32", name: "priceRequestKey", type: "bytes32" },
        ],
        internalType: "struct Pool.Input",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "uint256", name: "_index", type: "uint256" },
    ],
    name: "getRequestAtIndex",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "amountIn", type: "uint256" },
          { internalType: "uint256", name: "executionFee", type: "uint256" },
          { internalType: "address", name: "owner", type: "address" },
          { internalType: "uint48", name: "requestTimestamp", type: "uint48" },
          { internalType: "uint40", name: "stakeDuration", type: "uint40" },
          { internalType: "bool", name: "isLongToken", type: "bool" },
          { internalType: "bool", name: "reverseWrap", type: "bool" },
          { internalType: "bool", name: "isDeposit", type: "bool" },
          { internalType: "bytes32", name: "key", type: "bytes32" },
          { internalType: "bytes32", name: "priceRequestKey", type: "bytes32" },
        ],
        internalType: "struct Pool.Input",
        name: "request",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getRewardTracker",
    outputs: [
      { internalType: "contract IRewardTracker", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getStorage",
    outputs: [
      {
        components: [
          {
            components: [
              { internalType: "uint16", name: "maxLeverage", type: "uint16" },
              { internalType: "uint16", name: "reserveFactor", type: "uint16" },
              {
                internalType: "int16",
                name: "maxFundingVelocity",
                type: "int16",
              },
              { internalType: "int48", name: "skewScale", type: "int48" },
              {
                internalType: "int16",
                name: "positiveLiquidityScalar",
                type: "int16",
              },
              {
                internalType: "int16",
                name: "negativeLiquidityScalar",
                type: "int16",
              },
            ],
            internalType: "struct Pool.Config",
            name: "config",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "longAverageEntryPriceUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortAverageEntryPriceUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longCumulativeBorrowFees",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortCumulativeBorrowFees",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "weightedAvgCumulativeLong",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "weightedAvgCumulativeShort",
                type: "uint256",
              },
            ],
            internalType: "struct Pool.Cumulatives",
            name: "cumulatives",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "longOpenInterest",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortOpenInterest",
            type: "uint256",
          },
          { internalType: "int64", name: "fundingRate", type: "int64" },
          { internalType: "int64", name: "fundingRateVelocity", type: "int64" },
          { internalType: "uint64", name: "longBorrowingRate", type: "uint64" },
          {
            internalType: "uint64",
            name: "shortBorrowingRate",
            type: "uint64",
          },
          { internalType: "uint48", name: "lastUpdate", type: "uint48" },
          { internalType: "int256", name: "fundingAccruedUsd", type: "int256" },
          { internalType: "uint256", name: "impactPool", type: "uint256" },
        ],
        internalType: "struct Pool.Storage",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getTicker",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "MarketId", name: "_id", type: "bytes32" }],
    name: "getVault",
    outputs: [{ internalType: "contract IVault", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "roles", type: "uint256" },
    ],
    name: "grantRoles",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "roles", type: "uint256" },
    ],
    name: "hasAllRoles",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "roles", type: "uint256" },
    ],
    name: "hasAnyRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_tradeStorage", type: "address" },
      { internalType: "address", name: "_priceFeed", type: "address" },
      { internalType: "address", name: "_marketFactory", type: "address" },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      {
        components: [
          { internalType: "uint16", name: "maxLeverage", type: "uint16" },
          { internalType: "uint16", name: "reserveFactor", type: "uint16" },
          { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
          { internalType: "int48", name: "skewScale", type: "int48" },
          {
            internalType: "int16",
            name: "positiveLiquidityScalar",
            type: "int16",
          },
          {
            internalType: "int16",
            name: "negativeLiquidityScalar",
            type: "int16",
          },
        ],
        internalType: "struct Pool.Config",
        name: "_config",
        type: "tuple",
      },
      { internalType: "address", name: "_poolOwner", type: "address" },
      { internalType: "uint256", name: "_borrowScale", type: "uint256" },
      { internalType: "address", name: "_marketToken", type: "address" },
      { internalType: "string", name: "_ticker", type: "string" },
    ],
    name: "initializePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "result", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "pendingOwner", type: "address" },
    ],
    name: "ownershipHandoverExpiresAt",
    outputs: [{ internalType: "uint256", name: "result", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      { internalType: "contract IPriceFeed", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceImpactScalar",
    outputs: [{ internalType: "uint64", name: "", type: "uint64" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "roles", type: "uint256" }],
    name: "renounceRoles",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestOwnershipHandover",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "roles", type: "uint256" },
    ],
    name: "revokeRoles",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "rolesOf",
    outputs: [{ internalType: "uint256", name: "roles", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "uint16", name: "_maxLeverage", type: "uint16" },
    ],
    name: "setMaxLeverage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint64", name: "_priceImpactScalar", type: "uint64" },
    ],
    name: "setPriceImpactScalar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeStorage",
    outputs: [
      { internalType: "contract ITradeStorage", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "address", name: "_newOwner", type: "address" },
    ],
    name: "transferPoolOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      {
        components: [
          { internalType: "uint16", name: "maxLeverage", type: "uint16" },
          { internalType: "uint16", name: "reserveFactor", type: "uint16" },
          { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
          { internalType: "int48", name: "skewScale", type: "int48" },
          {
            internalType: "int16",
            name: "positiveLiquidityScalar",
            type: "int16",
          },
          {
            internalType: "int16",
            name: "negativeLiquidityScalar",
            type: "int16",
          },
        ],
        internalType: "struct Pool.Config",
        name: "_config",
        type: "tuple",
      },
      { internalType: "uint256", name: "_borrowScale", type: "uint256" },
    ],
    name: "updateConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "int256", name: "_priceImpactUsd", type: "int256" },
    ],
    name: "updateImpactPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "MarketId", name: "_id", type: "bytes32" },
      { internalType: "string", name: "_ticker", type: "string" },
      { internalType: "uint256", name: "_sizeDelta", type: "uint256" },
      {
        components: [
          { internalType: "uint256", name: "indexPrice", type: "uint256" },
          { internalType: "uint256", name: "indexBaseUnit", type: "uint256" },
          { internalType: "uint256", name: "impactedPrice", type: "uint256" },
          {
            internalType: "uint256",
            name: "longMarketTokenPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortMarketTokenPrice",
            type: "uint256",
          },
          { internalType: "int256", name: "priceImpactUsd", type: "int256" },
          { internalType: "uint256", name: "collateralPrice", type: "uint256" },
          {
            internalType: "uint256",
            name: "collateralBaseUnit",
            type: "uint256",
          },
        ],
        internalType: "struct Execution.Prices",
        name: "_prices",
        type: "tuple",
      },
      { internalType: "bool", name: "_isLong", type: "bool" },
      { internalType: "bool", name: "_isIncrease", type: "bool" },
    ],
    name: "updateMarketState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPriceFeed",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "updatePriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;
